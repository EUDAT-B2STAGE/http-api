
GUIDELINES:
- Python 3.5
- PEP compliant
- Unittest: nose2
- Test driven
- Based on docker environment
- Usable if not inside Docker
- Swagger?

BEST PRACTICES:

  - use collection.namedtuple for returning multiple values
  - ptipython as default shell
  - httpie as command line
  - click/easyargs/anythingsimilar for quick command line prototypes
  - virtualenv for multiple versioning libraries

--- ✄ -----------------------

curl \
  -k 'https://unity.eudat-aai.fz-juelich.de:8443/oauth2/userinfo' \
  -H "Accept: application/json" -H "Authorization: Bearer TOKEN"

{"sub":"82e56123-149c-4bf8-9f92-87848aaafc24","cn":"PaoloD'OnorioDeMeo","email":"p.donoriodemeo@cineca.it"}

current:

  about being effectively collaborative in a team project

   - ask
    ☐ Ask for b2safe production certification authority (+ signing_policy)
    ☐ Ask for two accounts rmucci + pdonorio on B2SAFE dev
 - travis
   ☐ check CI
   - endpoints
    ☐ PATCH method
    ☐ GET response
   - irods
    ☐ b2access id <-> irods user mapping
    ☐ sqllite External account
   - b2access
   ☐ use X509_USER_PROXY if token is "flagged" external/b2access?
   ☐ test with B2SAFE dev
   ☐ what if, when the proxy or the token expire?
 - HTTPS proxy
   ☐ enable and check
   ☐ openstack
     ☐ https://b2stage.cineca.it/api
   ☐ real certificates

later:
  ☐ unittest for B2ACCESS...
  ☐ remove _latest_token from anywhere and test
  ☐ fix json: import from jsonify
  ☐ parameters input from reading the json config
  ☐ change base.py into core.py
  ☐ write again a custom response.py
    ☐ what is the motivation of make_custom_response?

--- ✄ -----------------------
THINGS TO DO:

- endpoints
- tests
- write a custom response
- support custom response inside unit tests
- sql support to irods users
- b2access
- how to specify current b2safe environment domain: a configuration @paramater

--- ✄ ----------------------- DETAILS

AUTHENTICATION:
  ☐ check if b2access works
  ☐ check sqllite support for tokens
    ☐ oauth2 linked model to tokens?
      ☐ write new models if necessary
  ☐ build sqldminer own image with php alpine?
  https://github.com/vrana/adminer/commit/7a33661b721714a8b266bf57c0065ae653bb8097#commitcomment-17728245
  https://hub.docker.com/r/clue/adminer/~/dockerfile/
  ☐ tokens and users
    ☐ check/write models

IRODS RELATED:
  ✔ irods resources are only for replica @done (16-09-26 16:36)
    ☐ iget gets the file from the first available resource
      ☐ if the default one is not available it will get it from another
      ☐ you can specify from iget the resource to use
    ✔ resource is not a constraint to get a uniquely identified file name @done (16-09-26 16:36)

UNIT TEST:
☐ uploads with random name
☐ users create if testing
☐ A common class
 ☐ startup
   ☐ create users and token
 ☐ end
   ☐ remove users, tokens
   ☐ and any object related to that user
☐ Clean with "finally" if any error

LAUNCH and CONFIGURATION:
  ☐ the new do.py command @rapydo
  ☐ configuration
    ☐ run pure python, no docker
      ☐ requirements.txt (pip freeze)
        ☐ a smaller one than current python docker image
      ☐ instructions with @virtualenv
  ☐ packages?
    ☐ a script to create the package
    see B2SAFE example
    ☐ centos 7 (6?), opensuse 11

PERFOMANCE & PRODUCTION:
 ☐ nginx proxy and real certificates
 ☐ profiling
 https://github.com/muatik/flask-profiler
 ☐ benchmarks

--- ✄ -----------------------

UID:
  ☐ Not for now
  http://stackoverflow.com/a/19580599/2114395
  http://stackoverflow.com/a/6048639/2114395
  http://stackoverflow.com/a/14023468/2114395

  # initial proposal
  12 - 3456789
    ☐ alphanum
    ☐ first 2 chars are reserved to indentify the b2safe instance
      ☐ wp6 should map those code
      ☐ use a /api/internals/mappings/b2safe to manage the list?
    ☐ not uuid (just Unique ID) and as small as possible
      ☐ use path, resource, filename and b2safe code for creating the hash

curl commands:
  - put file
  curl -X PUT -F file=@/tmp/gettoken $SERVER/api/resources/tempZone/home/guest/token.txt -H "$AUTH"

