version: '3'

# #####################
# VOLUMES
# #####################

volumes:
  jwt_tokens:
    driver: local
  sqldata:
    driver: local
  letsencrypt_certs:
    driver: local
  ssl_dhparam:
    driver: local

# #####################
# NETWORKS
# #####################

networks:
  # default:
  i_net:
  app_net:
  proxy_net:
  db_net:
    # # driver: bridge
    # ipam:
    #   driver: default
    #   config:
    #     # Note: use this configuration to match inside internal rules
    #     - subnet: ${DB_SUBNET}/16

# #####################
# SERVICES
# #####################
services:

  ########################
  ###  MAIN CONTAINER  ###
  ########################
  backend:
    # command: sleep infinity
    build:
      context: ../submodules/build-templates/backend
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
    # image: ${COMPOSE_PROJECT_NAME}/backend:template
    image: rapydo/backend:${RAPYDO_VERSION}
    # hostname: restapi
    hostname: rapydo_server
    environment:
      ACTIVATE: 0  # activate me inside your Blueprint
      FLASK_APP: ${COMPOSE_PROJECT_NAME}/${PYTHON_MAIN_FILE}.py
      UWSGI_APP: ${COMPOSE_PROJECT_NAME}.${PYTHON_MAIN_FILE}
      VANILLA_PACKAGE: ${COMPOSE_PROJECT_NAME}
      JWT_APP_SECRETS: ${JWT_APP_SECRETS}
      DEBUG_ENDPOINTS: 0
      # base the user/role mechanism on some database
      AUTH_ENABLE: 0
      # disable the basic /api/login method
      MAIN_LOGIN_ENABLE: 0
      # AUTH_SERVICE: ${AUTH_SERVICE}
      # # if Unicode is complaining with print
      # PYTHONIOENCODING: UTF-8
    volumes:
      # Custom configuration
      - ../projects/${COMPOSE_PROJECT_NAME}/project_configuration.yaml:/code/confs/project_configuration.yaml
      # Vanilla code
      - ../projects/${COMPOSE_PROJECT_NAME}/backend:/code/${COMPOSE_PROJECT_NAME}
      # JWT tokens secret
      - jwt_tokens:${JWT_APP_SECRETS}
    networks:
      app_net:
        aliases:
          - ${FLASK_HOST}
      db_net:
      # i_net:

  ##############################
  proxy:
    build:
      context: ../submodules/build-templates/proxy
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
    # image: ${COMPOSE_PROJECT_NAME}/proxy:template
    image: rapydo/proxy:${RAPYDO_VERSION}
    hostname: reverseproxy
    volumes:
      # - letsencrypt_certs:/etc/letsencrypt
      - ssl_dhparam:/etc/nginx/ssl/
    networks:
      proxy_net:
        aliases:
          - ${PROXY_HOST}
      app_net:
    ports:
      - ${PROXY_DEV_PORT}:${PROXY_DEV_PORT}   # 80 redirect
      - ${PROXY_PROD_PORT}:${PROXY_PROD_PORT} # 443 SSL
    environment:
      DOMAIN: ${PROJECT_DOMAIN}
      MODE: ${LETSENCRYPT_MODE}
      ACTIVATE: 0
    depends_on:
      # NOTE: you have to rewrite all depends_on in a new yml file
      # at the moment they do not cumulate
      - backend
      # - frontend

  ###################
  ###  DATABASES  ###
  ###################
  postgres:
    # image: postgres:9.6
    # image: postgres:9.6.5-alpine
    image: postgres:10.0-alpine
    volumes:
      - sqldata:/var/lib/postgresql/data
      - ../submodules/build-templates/postgres/pgs_init.sh:/docker-entrypoint-initdb.d/init-db-and-users.sh:ro
    environment:
      ACTIVATE: 0
      POSTGRES_USER: "${PLACEHOLDER}"
      POSTGRES_PASSWORD: "${PLACEHOLDER}"
      POSTGRES_DBS: ${PLACEHOLDER}
    networks:
      db_net:
        aliases:
          - ${ALCHEMY_HOST}

  # neo4j:
  #   image: neo4j:3.2.2
  #   # image: neo4j:3.2.3
  #   # volumes:
  #   #   - graphdata:/data
  #   # networks:
  #   #   db_net:
  #   #     aliases:
  #   #       - ${GRAPHDB_HOST}
  #   environment:
  #     ACTIVATE: 0
  #     NEO4J_AUTH: neo4j/${PLACEHOLDER}
  #     # NEO4J_dbms_memory_pagecache_size: 2048M
  #     # NEO4J_dbms_memory_heap_maxSize: 4096M
  #   # ports:
  #   #   - 9090:7474
  #   #   - 7687:7687

  # mongodb:
  #   image: mongo:3.4
  #   # volumes:
  #   #   - mongodata:/data/db
  #   # networks:
  #   #   db_net:
  #   #     aliases:
  #   #       - ${MONGO_HOST}
  #   environment:
  #     ACTIVATE: 0

  swaggerui:
    # build:
    #   context: ../submodules/build-templates/swaggerui
    #   args:
    #     RAPYDO_VERSION: ${RAPYDO_VERSION}
    # # image: ${COMPOSE_PROJECT_NAME}/swaggerui:template
    # image: rapydo/swaggerui:${RAPYDO_VERSION}
    image: swaggerapi/swagger-ui:latest
    # image: swaggerapi/swagger-ui:v3.0.5
    environment:
      ACTIVATE: 0

  sqlalchemyui:
    # NOTE: this image let you access sqllite/postgres/mysql
    # with a phpmyadmin-like web page
    image: adminer:4.3.1-standalone
    # build:
    #   context: ../submodules/build-templates/sqlalchemyui
    #   args:
    #     RAPYDO_VERSION: ${RAPYDO_VERSION}
    # image: rapydo/sqlalchemyui:${RAPYDO_VERSION}
    networks:
      db_net:
    environment:
      ACTIVATE: 0
      # https://github.com/vrana/adminer/tree/master/designs
      # ADMINER_DESIGN: brade

  # mongoui:
  #   image: mongo-express:0.40.0
  #   environment:
  #     ACTIVATE: 0
  #     ME_CONFIG_MONGODB_SERVER: ${MONGO_HOST}
  #   networks:
  #     db_net:

  #############
  # REST API client (wget, curl, httpie, http-prompt)
  restclient:
    build:
      context: ../submodules/build-templates/restclient
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
    # image: ${COMPOSE_PROJECT_NAME}/restclient:template
    image: rapydo/restclient:${RAPYDO_VERSION}
    hostname: rapydo_client
    environment:
      MAIN_ENDPOINT: ${API_MAIN_ENDPOINT}
      ACTIVATE: 0
    volumes:
      # - ../submodules/utils/utilities/projects_defaults.yaml:/code/base.yml
      - ../projects/${COMPOSE_PROJECT_NAME}/project_configuration.yaml:/code/custom.yml


  ###################
  ### FTP SERVER  ###
  ###################
  # ftp:
  #   # image: stilliard/pure-ftpd:latest

  ######################################################
  ###  iRODS iCAT server (usually for EUDAT B2safe)  ###
  ######################################################
  icat:
    # B2safe instance on irods
    build:
      context: ../submodules/build-templates/icat
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
    # image: ${COMPOSE_PROJECT_NAME}/icat:template
    image: rapydo/icat:${RAPYDO_VERSION}
    hostname: ${IRODS_HOST}
    # command: sleep infinity
    environment:
      ACTIVATE: 0
      POSTGRES_HOST: ${PLACEHOLDER}
      POSTGRES_USER: ${PLACEHOLDER}
      POSTGRES_PASSWORD: ${PLACEHOLDER}
      IRODS_HOST: ${PLACEHOLDER}
      IRODS_PORT: ${PLACEHOLDER}
      IRODS_ZONE: ${PLACEHOLDER}
      IRODS_DB: ${PLACEHOLDER}
      IRODS_USER: ${PLACEHOLDER}
      IRODS_PASSWORD: ${PLACEHOLDER}
    networks:
      i_net:
        aliases:
          - ${IRODS_HOST}
      db_net:
    depends_on:
      - postgres

  # #################################
  # OTHERS
  # #################################

  #######################
  # elasticsearch:
  #   image: elasticsearch
  #   hostname: elastic
  #   volumes:
  #       - restangulask_graphbased_elasticdata:/usr/share/elasticsearch/data

  #################################
  # SMTP server
  # smtp:
  #   image: namshi/smtp

  #################################
  # REDIS key/value store
  # redisqueue:
  #   image: redis:alpine
  #   command: redis-server --appendonly yes
  #   hostname: myqueue
  #   volumes:
  #     - redisdata:/data
