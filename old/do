#!/bin/bash

#############################
# Defaults
# blueprintconf="specs/blueprint.init"

#############################
# Other variables

source .env

compose_com="docker-compose"
webbuild="bower"
volume_prefix="${COMPOSE_PROJECT_NAME}"
fronted_container="frontend"
backend_container="backend"
backend_repo="backend"
frontend_repo="frontend"
# backend_git="https://github.com/mdantonio/http-api-base"
backend_git="https://github.com/EUDAT-B2STAGE/http-api-base"
frontend_git="https://github.com/mdantonio/angularjs-on-flask"
services="$backend_container $fronted_container"
submodule_tracking="submodules.current.commit"


#############################
echo "# ############################################ #"
echo -e "\t\tRestangulask"
echo "# ############################################ #"
echo ""

#####################
# Check prerequisites
coms="docker $compose_com"
for com in $coms;
do
    dcheck=`which $com`
    if [ "$dcheck" == "" ]; then
        echo "Please, install $com to use this project."
        exit 1
    fi
    dcheck=`$com ps 2>&1 | grep -i "cannot connect"`
    if [ "$dcheck" != "" ]; then
        echo "Please check if your Docker daemon is running"
        exit 1
    fi
done

# TO FIX: also for do.py
compose_com="docker-compose --project-name $COMPOSE_PROJECT_NAME"
#############################

if [ "$1" != "help" ]; then

    #############################
    # Check compose stack existence
    backendyaml="backend/docker-compose.yml"
    frontendyaml="frontend/docker-compose.yml"

    if [ -z $2 ]; then
        mode="debug"
    else
        mode="$2"
    fi

## VERY IMPORTANT !!!
    echo "### SELECTED MODE: [$mode]"
    export SELECTED_APP_MODE=$mode
    if [ "$mode" == "production" ]; then
        services="proxy"
    fi

    filebase="containers/$mode.yml"
    if [ ! -f "$filebase" ]; then
        echo "File '$filebase' not found!"
        echo ""
        echo "Configuration is corrupted!!"
        exit 1
    fi
    # filecustom="containers/${1}/$mode.yml"
    # if [ ! -f "$filecustom" ]; then
    #     echo "File '$filecustom' not found!"
    #     echo "You might start up copying 'demo.yml'."
    #     exit 1
    # fi
    files="-f $backendyaml -f $frontendyaml -f $filebase"

    # Remove previous configuration
    #echo "Clean configuration files"
    # if [ -f "../$blueprintconf" ]; then
    #     rm ../$blueprintconf
    # fi
fi

if [ "$1" == "help" -o -z "$1" ]; then
    echo "Usage: $0 COMMAND [OPTIONS]"
    echo ""
    echo "Available list of COMMANDs:"
    echo ""
    echo -e "init:\t\tStartup your repository code, containers and volumes"
    echo -e "graceful:\tTry to bring up only missing containers"
    echo -e "restart:\t(Re)Launch the Docker stack"
    echo -e "status:\tCheck the stack status"
    echo -e "stop:\tFreeze your containers stack"
    echo -e "remove:\tRemove all containers"
    echo -e "clean:\tRemove containers and volumes (BE CAREFUL!)"
    echo ""
    echo -e "backend:\tOpen a shell inside the Flask REST API server container"
    echo -e "test_backend:\tLaunch python tests with nose2"
    echo -e "frontend:\tOpen a shell inside the Flask REST API server container"
    echo -e "sql:\tLaunch a sqladminer on port 8888"
    echo -e "bower:\tInstall all libraries or only the one specified"
    echo -e "karma:\tA shell to test angularjs code"
    echo ""
    echo -e "push:\tPush code to github"
    echo -e "update:\tPull both updated code and docker images"
    echo ""
    exit 0
fi

#############################
# Check libs
if [ -z "$1" -o "$1" != "init" ]; then
    libs="libs/bower_components"
    out=`ls $libs 2> /dev/null | wc -m | tr -d ' '`
    if [ "$out" == "0" ]; then
        echo ""
        echo "[ERROR] You are missing JS libraries!"
        echo "Please run:"
        echo "$0 init"
        exit 1
    fi
fi


#############################
# DEFAULTS FILES

# Backend
file="project_configuration.yaml"
check="specs/$file"
if [ ! -s "$check" ]; then
    echo "File '$check' not found or empty..."
    exit 1
fi

# Frontend
check="js/routing.extra.js"
if [ ! "$(ls -A $check 2> /dev/null)" ]; then
    echo "Directory '$check' not found or empty..."
    echo "Please create at least your custom routing."
    exit 1
fi


#############################
# Run services
bcom="$compose_com -f backend/docker-compose.yml -f frontend/docker-compose.yml run --rm $webbuild bower install"

# First time install
if [ "$1" == "init" ]; then

    echo -e "ACTION: Project init\n"
    #git remote add private
    #git@gitlab.hpc.cineca.it:mdantoni/telethon_repo.git

    #echo "Download docker images"
    #$compose_com $files pull
    if [ ! -d "$backend_repo" ]; then
        echo "Clone backend"
        git clone $backend_git $backend_repo
    fi
    if [ ! -d "$frontend_repo" ]; then
        echo "Clone frontned"
        git clone $frontend_git $frontend_repo
    fi

    echo "Build bower packages (Javascript libraries)"
    $bcom
    echo "Completed"
# Logs
elif [ "$1" == "logs" ]; then

    $compose_com $files logs -f

elif [ "$1" == "status" ]; then
    echo -e "ACTION: Status check\n"

elif [ "$1" == "graceful" ]; then
    echo -e "ACTION: Start\n"
    $compose_com $files up -d $services

elif [ "$1" == "restart" ]; then
    echo -e "ACTION: Reboot\n"
    echo "Cleaning project containers (if any)"
    $compose_com $files stop
    $compose_com $files rm -f
    echo "Starting up"
    $compose_com $files up -d $services

elif [ "$1" == "stop" ]; then
    echo -e "ACTION: Stop\n"
    echo "Freezing services"
    $compose_com $files stop

elif [ "$1" == "remove" ]; then
    echo -e "ACTION: Removal\n"
    echo "Destroying services"
    $compose_com $files stop
    $compose_com $files rm -f

elif [ "$1" == "clean" ]; then

    echo -e "ACTION: Total removal\n"
    echo "Destroying (forever) containers & volumes. Are you really sure?"
    sleep 5
    $compose_com $files stop
    $compose_com $files rm -f
    for volume in `docker volume ls -q | grep $volume_prefix`;
    do
        docker volume rm $volume
        echo "Removed volume: $volume"
    done
    echo ""

elif [ "$1" == "backend" ]; then
    echo "Opening a shell inside the $1 container"
    echo "(If in debug mode, run Flask with './boot devel')"
    echo ""
    $compose_com $files exec $backend_container bash
    exit 0

elif [ "$1" == "frontend" ]; then
    echo "Opening a shell inside the $1 container"
    echo "(If in debug mode, run Flask with './boot devel')"
    echo ""
    $compose_com $files exec $fronted_container bash
    exit 0

elif [ "$1" == "test_backend" ]; then

    echo "Running tests"
    $compose_com $files exec $backend_container ./tests.sh
    if [ "$?" != "0" ]; then
        echo "Tests failed!"
        exit 1
    fi
    echo "Well done"
    exit 0

elif [ "$1" == "sql" ]; then
    echo "Launch adminer for SQL servers"
    $compose_com run --rm --service-ports sqladmin

elif [ "$1" == "push" ]; then

    echo "Running tests"
    # Add nohup?
    $compose_com $files exec $backend_container ./tests.sh
    if [ "$?" != "0" ]; then
        echo "Tests are failing. Push was stopped"
        exit 1
    fi

    echo "Pushing submodule"
    cd $backend_repo
    git push
    if [ $? != "0" ]; then
        echo "Failed to push backend"
        exit 1
    fi
    cd ..

    # Save a snapshot of current submodule
    echo "Save submodule status"
    echo -e \
        $(cd $submodule_repo && git log -n 1 --oneline --no-color)"\n"$(cd $submodule_repo && git branch --no-color) \
        > $submodule_tracking

    echo "Pushing main repo"
    git add $submodule_tracking
    git commit && echo "Commit has been done"

    # Push to all repos setted
    for repo in `git remote`;
    do
        git push $repo
    done

    exit 0

# Update repos, packages and images
elif [ "$1" == "update" ]; then

    $compose_com $files pull
    current=`pwd`

    echo "Pulling main repo"
    git pull

    echo "Pulling backend"
    cd $backend_repo
    git pull
    cd ..

    echo "Pulling frontend"
    cd $frontend_repo
    git pull
    cd ..

    echo "Updating libs"
    $bcom

    exit 0

# Bower install
elif [ "$1" == "bower" ]; then

    if [ "$2" != "" ]; then
        bcom="${bcom} $2 --save"
        echo "Install package(s): $2"
    fi
    $bcom
# Angularjs tests
elif [ "$1" == "karma" ]; then

    echo "Opening shell for nodejs"
    $compose_com run --rm $1 bash
    exit 0
else
    echo "Unknown command '$1'. Ask for help:"
    echo ""
    echo "$0 help"
    exit 0
fi

# Final check up
if [ "$?" == "0" ]; then
    if [ "$1" == "init" ]; then
        echo ""
        echo "You may launch containers now. Use:"
        echo "$0 restart"
        echo ""
    else
        echo "[$COMPOSE_PROJECT_NAME] configuration. Status:"
        $compose_com $files ps
        echo ""
        echo "Available volumes for current configuration:"
        docker volume ls | grep $volume_prefix
    fi

    if [ "$1" == 'restart' -o "$1" == 'graceful' ]; then
        echo ""
        echo "Access containers with:"
        echo "$0 backend"
        echo "and/or"
        echo "$0 frontend"
    fi
fi
