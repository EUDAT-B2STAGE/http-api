a5b55f45f48be8fdb32e271248fcfdcd2abf5276 diff --git a/restapi/resources/exceptions.py b/restapi/resources/exceptions.py new file mode 100644 index 0000000..992536b --- /dev/null +++ b/restapi/resources/exceptions.py @@ -0,0 +1,14 @@ +# -*- coding: utf-8 -*- + +""" + +Generalization of Exceptions +to handle services known errors + +""" + +from .. import get_logger + +class RestApiException(Exception): + + pass diff --git a/restapi/resources/services/irodsclient.py b/restapi/resources/services/irodsclient.py index 099d54f..6f874d8 100644 --- a/restapi/resources/services/irodsclient.py +++ b/restapi/resources/services/irodsclient.py @@ -16,6 +16,7 @@ import inspect import re from collections import OrderedDict from ..basher import BashCommands +from ..exceptions import RestApiException from confs.config import IRODS_ENV from . import irods @@ -28,7 +29,8 @@ logger = get_logger(__name__) IRODS_USER_ALIAS = 'clientUserName' CERTIFICATES_DIR = '/opt/certificates' -class IrodsException(Exception): + +class IrodsException(RestApiException): def __init__(self, exception): super(IrodsException).__init__() diff --git a/test/test_dataobjects.py b/test/test_dataobjects.py index a3bb53d..164ed68 100644 --- a/test/test_dataobjects.py +++ b/test/test_dataobjects.py @@ -67,6 +67,17 @@ class TestDataObjects(object): r = self.app.get(deleteURI, data=dict(collection=('/home/guest'))) assert_equals(r.status_code, 200) + def test_06_post_already_existing_dataobjects(self): + """ Test file upload with already existsing object: POST """ + r = self.app.post('http://localhost:8080/api/dataobjects', data=dict( + file=(io.BytesIO(b"this is a test"), + 'test.pdf'))) + assert_equals(r.status_code, 400) # or 409? + content = json.loads(r.data.decode('utf-8')) + error_message = content['Response']['errors'] + print(error_message) +# assert('already exists' in error_message) + def test_07_delete_dataobjects(self): """ Test file delete: DELETE """ @@ -87,17 +98,6 @@ class TestDataObjects(object): r = self.app.delete(deleteURI, data=dict(collection=(collection))) assert_equals(r.status_code, 200) - def test_06_post_already_existing_dataobjects(self): - """ Test file upload with already existsing object: POST """ - r = self.app.post('http://localhost:8080/api/dataobjects', data=dict( - file=(io.BytesIO(b"this is a test"), - 'test.pdf'))) - assert_equals(r.status_code, 500) # or 409? - content = json.loads(r.data.decode('utf-8')) - error_message = content['Response']['errors'] - print(error_message) -# assert('already exists' in error_message) - def test_08_post_dataobjects_in_non_existing_collection(self): """ Test file upload in a non existing collection: POST """ r = self.app.post('http://localhost:8080/api/dataobjects', data=dict(
[master] Fixing the error and tests in case we upload an already existing file
