3d2a794b8dcf993c6795a2fb749f78caafec716d
! [graph_based_auth] Understaing Restful plugin position into create app. CHANGELOG.md LICENSE README.md __pycache__ boot confs docker-compose.yml docs htmlcov instance mkdocs.yml operations operations.py restapi run.py tasks test tests.sh [master] Merge pull request #12 from EUDAT-B2STAGE/graph_based_auth ! [oauthtest] A working example of b2access authorization. Adding certificates on the http-api repo to make it work. --- - [master] Merge pull request #12 from EUDAT-B2STAGE/graph_based_auth +* [graph_based_auth] Understaing Restful plugin position into create app. +* [graph_based_auth^] Understanding tests and verify where it works +* [graph_based_auth~2] Working some tests +* [graph_based_auth~3] Bug fixing +* [graph_based_auth~4] Making better urls for basic endpoints +* [graph_based_auth~5] Still cleaning old and unused stuff for profiles, endpoints and db +* [graph_based_auth~6] Purging more security/admin old (bad) stuff +* [graph_based_auth~7] Implemented our Authorization class based on Miguel's one. +* [graph_based_auth~8] Making our response more Flask compliant. +* [graph_based_auth~9] Adding the new section of the documentation +* [graph_based_auth~10] Bug fixing for relationaldb +* [graph_based_auth~11] Some bug fixes +* [graph_based_auth~12] Adding a docker environment variable to select auth service +* [graph_based_auth~13] Brainstorming +* [graph_based_auth~14] A working example of custom auth. +* [graph_based_auth~15] A working check of username and password stored inside graph db. +* [graph_based_auth~16] There must be an auth init inside the backend server. +* [graph_based_auth~17] Fixing the login endpoint first draft. +* [graph_based_auth~18] Moving the flask_httpauth lib instance into a file that can be loaded from anywhere +* [graph_based_auth~19] Using decorators for some auth global magic +* [graph_based_auth~20] Another big step towards custom authentication. +* [graph_based_auth~21] Starting some implementation on an abstract base +* [graph_based_auth~22] Saving resources +* [graph_based_auth~23] Some brainstorming +* [graph_based_auth~24] More auth cleaning. Moving modules to be dinamically loaded +* [graph_based_auth~25] Rethinking authentication side. +* [graph_based_auth~26] Making some tests for login endpoint +* [graph_based_auth~27] Move some other logic from vanilla inside the backend +* [graph_based_auth~28] A note on jwt to fix +* [graph_based_auth~29] A working example of coding/decoding a JWT token. +* [graph_based_auth~30] Adding a JWT token creation. +* [graph_based_auth~31] Defining basic user/roles and connect them if none available +* [graph_based_auth~32] removing custom from the base +* [graph_based_auth~33] Changing names +* [graph_based_auth~34] Fixing tests +* [graph_based_auth~35] Moving tests into two separated dirs. -- [graph_based_auth~36] Merge branch 'master' of github.com:EUDAT-B2STAGE/http-api-base into graph_based_auth +* [master~2] Added reference to test doc page +* [master~3] First draft of test documentation +* [master~4] fixed test test_03_post_dataobjects_in_specific_collection +* [master~5] added test with POST in a specific collection (fails with error: The requested collection does not exist) +* [graph_based_auth~37] Using flask login/security methods +* [graph_based_auth~38] Fixing graph functions to make login work +* [graph_based_auth~39] Towards graphdb centric flask +* [graph_based_auth~40] Cleaning up the task list +* [graph_based_auth~41] A stub to override FlaskLogin/Security authentication methods [WARNING: Code is incomplete and still not working] +* [graph_based_auth~42] A note about an Irods error to be parsed -- [graph_based_auth~43] Merge branch 'master' of https://github.com/EUDAT-B2STAGE/http-api-base into irods_commands +* [master~6] Loading dinamically models for the graph -- [graph_based_auth~44] Merge branch 'master' of https://github.com/EUDAT-B2STAGE/http-api-base into irods_commands +* [master~7] Init of the graph at flask server startup. Import from your code the GraphFarmer class and extend it. -- [graph_based_auth~45] Merge branch 'master' of https://github.com/EUDAT-B2STAGE/http-api-base into irods_commands +* [master~8] Fixed tests with new error messaegs -- [graph_based_auth~46] Merge branch 'master' of https://github.com/EUDAT-B2STAGE/http-api-base into irods_commands -- [graph_based_auth~47] Merge branch 'master' of https://github.com/EUDAT-B2STAGE/http-api-base into irods_commands +* [graph_based_auth~48] Fix conflicts between enumerate and list.pop +* [graph_based_auth~49] Implemented a list_as_json function to parse the irods ils. The function is intended to be a stub of irods output parser, it will change with next commits. see #9 +* [graph_based_auth~50] Implemented a get_permissions function to retrieve ACL set on a collection/dataobject, see #3 Output example: { 'path': '/your_zone/your_path/', 'ACL': [ ['your_user', 'your_zone', 'own'], ['other_user', 'your_zone', 'read'] ], 'inheritance': 'Disabled' } +* [graph_based_auth~51] Added a function to verify the existence of an irods user and optionally to verify the membership to an irods group, see #3 + [oauthtest] A working example of b2access authorization. Adding certificates on the http-api repo to make it work. + [oauthtest^] Bug fix for base encoding in python3. + [oauthtest~2] Going forward the b2access protocol + [oauthtest~3] A working example of accessing a token with github api +*+ [master~9] Fixing the regexp for irods errors. Adding some other code parsing.
