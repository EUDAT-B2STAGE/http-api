b7abdca7d9f538d9919af6d2577eba48d79bf30b diff --git a/test/test_dataobjects.py b/test/test_dataobjects.py index b6200e0..05cd696 100644 --- a/test/test_dataobjects.py +++ b/test/test_dataobjects.py @@ -8,9 +8,8 @@ import io import os import json import unittest - from restapi.server import create_app -#from nose2.tools import assert_equals + __author__ = 'Roberto Mucci (r.mucci@cineca.it)' @@ -34,7 +33,7 @@ class TestDataObjects(unittest.TestCase): """ Test that the flask server is running and reachable""" r = self.app.get('http://localhost:8080/api/verify') - assert(r.status_code == 200) + self.assertEqual(r.status_code, 200) def test_02_post_dataobjects(self): """ Test file upload: POST """ @@ -43,7 +42,7 @@ class TestDataObjects(unittest.TestCase): r = self.app.post('http://localhost:8080/api/dataobjects', data=dict( file=(io.BytesIO(b"this is a test"), 'test.pdf'))) - assert(r.status_code == 200) # maybe 201 is more appropriate + self.assertEqual(r.status_code, 200) # maybe 201 is more appropriate def test_03_post_large_dataobjects(self): """ Test large file upload: POST """ @@ -54,29 +53,29 @@ class TestDataObjects(unittest.TestCase): r = self.app.post('http://localhost:8080/api/dataobjects', data=dict( file=(open(path, 'rb'), 'img.JPG'))) os.remove(path) - assert(r.status_code == 200) # maybe 201 is more appropriate + self.assertEqual(r.status_code, 200) # maybe 201 is more appropriate def test_04_get_dataobjects(self): """ Test file download: GET """ deleteURI = os.path.join('http://localhost:8080/api/dataobjects', 'test.pdf') r = self.app.get(deleteURI, data=dict(collection=('/home/guest'))) - assert(r.status_code == 200) - assert(r.data == b'this is a test') + self.assertEqual(r.status_code, 200) + self.assertEqual(r.data, b'this is a test') def test_05_get_large_dataobjects(self): """ Test file download: GET """ deleteURI = os.path.join('http://localhost:8080/api/dataobjects', 'img.JPG') r = self.app.get(deleteURI, data=dict(collection=('/home/guest'))) - assert(r.status_code == 200) + self.assertEqual(r.status_code, 200) def test_06_post_already_existing_dataobjects(self): """ Test file upload with already existsing object: POST """ r = self.app.post('http://localhost:8080/api/dataobjects', data=dict( file=(io.BytesIO(b"this is a test"), 'test.pdf'))) - assert(r.status_code == 400) # or 409? + self.assertEqual(r.status_code, 400) # or 409? content = json.loads(r.data.decode('utf-8')) error_message = content['Response']['errors'] print(error_message) @@ -86,7 +85,7 @@ class TestDataObjects(unittest.TestCase): # Obatin the list of objects end delete r = self.app.get('http://localhost:8080/api/collections') - assert(r.status_code == 200) + self.assertEqual(r.status_code, 200) # is the following correct? content = json.loads(r.data.decode('utf-8')) # why each element inside data is a list with only 1 element? @@ -99,37 +98,34 @@ class TestDataObjects(unittest.TestCase): deleteURI = os.path.join('http://localhost:8080/api/dataobjects', obj[0]) r = self.app.delete(deleteURI, data=dict(collection=(collection))) - assert(r.status_code == 200) + self.assertEqual(r.status_code, 200) def test_08_post_dataobjects_in_non_existing_collection(self): """ Test file upload in a non existing collection: POST """ r = self.app.post('http://localhost:8080/api/dataobjects', data=dict( collection=('/home/wrong/guest'), file=(io.BytesIO(b"this is a test"), 'test.pdf'))) - assert(r.status_code == 400) # or 409? + self.assertEqual(r.status_code, 400) # or 409? content = json.loads(r.data.decode('utf-8')) - error_message = content['Response']['errors'] - print(error_message) -# assert('CAT_UNKNOWN_COLLECTION' in error_message) + error_message = content['Response']['errors'][0]['iRODS'] + self.assertIn('CAT_UNKNOWN_COLLECTION', error_message) def test_09_get_non_exising_dataobjects(self): """ Test file download of a non existing object: GET """ deleteURI = os.path.join('http://localhost:8080/api/dataobjects', 'test.pdf') r = self.app.get(deleteURI, data=dict(collection=('/home/guest'))) - assert(r.status_code == 400) # or 404? + self.assertEqual(r.status_code, 400) # or 404? content = json.loads(r.data.decode('utf-8')) - error_message = content['Response']['errors'] - print(error_message) -# assert('USER_INPUT_PATH_ERR' in error_message) + error_message = content['Response']['errors'][0]['iRODS'] + self.assertIn('USER_INPUT_PATH_ERR', error_message) def test_10_get_dataobjects_in_non_exising_collection(self): """ Test file download in a non existing collection: GET """ delURI = os.path.join('http://localhost:8080/api/dataobjects', 'test.pdf') r = self.app.get(delURI, data=dict(collection=('/home/wrong/guest'))) - assert(r.status_code == 400) # or 404? + self.assertEqual(r.status_code, 400) # or 404? content = json.loads(r.data.decode('utf-8')) - error_message = content['Response']['errors'] - print(error_message) -# assert('USER_INPUT_PATH_ERR' in error_message) + error_message = content['Response']['errors'][0]['iRODS'] + self.assertIn('USER_INPUT_PATH_ERR', error_message)
[master] Better use of asserts
