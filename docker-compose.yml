#################################
# STACK handling: use $ ./do
# DO NOT TOUCH THINGS HERE IF YOU DON'T KNOW WHAT YOU ARE DOING
#################################

# Upgrading to latest docker-compose reference version
# (V3 at the moment) - Feb 2017
version: '3'

#################################
services:

  #############
  # Postgres database server
  sql:
    image: postgres:9.6
    # command: /bin/bash -c "echo $$POSTGRES_DBS | tr -d \"'\""
    volumes:
      - sqldata:/var/lib/postgresql/data
      - ./confs/pgs_init.sh:/docker-entrypoint-initdb.d/setup-my-schema.sh:ro
    environment:
      POSTGRES_USER: "${ALCHEMY_USER}"
      POSTGRES_PASSWORD: "${ALCHEMY_PASSWORD}"
      POSTGRES_DBS: ${ALCHEMY_DBS}
    # healthcheck:
    #   test: ["CMD", "psql", "-U", "${ALCHEMY_USER}", "-c", "\\d"]
    #   interval: 5s
    #   timeout: 3s
    #   retries: 3
    # deploy:
    #   replicas: 1
    networks:
      dbnet:
        aliases:
          - ${ALCHEMY_HOST}

  #############
  # iRODS iCAT server for EUDAT B2safe
  icat:
    # B2safe instance on irods
    build: ./builds/b2safe
    image: b2safe:rapydo
    hostname: ${IRODS_HOST}
    # command: sleep infinity

    environment:
      POSTGRES_HOST: "${ALCHEMY_HOST}"
      POSTGRES_USER: "${ALCHEMY_USER}"
      POSTGRES_PASSWORD: "${ALCHEMY_PASSWORD}"
      IRODS_HOST: "${IRODS_HOST}"
      IRODS_PORT: ${IRODS_PORT}
      IRODS_ZONE: ${IRODS_ZONE}
      IRODS_DB: "${IRODS_DB}"
      IRODS_USER: ${IRODS_USER}
      IRODS_PASSWORD: ${ALCHEMY_PASSWORD}

    # # Open irods port to Outside world
    # ## CAREFULL: don't uncomment the two lines below if you don't know why
    # ports:
    #     - 1247:1247

    volumes:
      - etcconf:/etc
      - irodshome:/home/irods
      - irodsvar:/var/lib/irods
      - sharedcerts:/opt/certificates
      # - eudatopt:/opt
      - ./builds/b2safe/extra_b2safe.sh:/docker-entrypoint.d/b2safe.sh

    networks:
      inet:
        aliases:
          - ${IRODS_HOST}
      dbnet:
    depends_on:
      - sql

  # #############
  # # GRAPHdb neo4j
  # graphdb:
  #     image: neo4j:3.1
  #     # image: neo4j:2.3.3
  #     hostname: gdb
  #     environment:
  #       NEO4J_AUTH: neo4j/eudatapi
  #       # Other parameters?
  #       #NEO4J_HEAP_MEMORY
  #       #NEO4J_CACHE_MEMORY
  #     volumes:
  #         - graphdata:/data

  #############
  # iRODS iCAT server for EUDAT B2safe
  rest:
    hostname: api
    # image: eudatb2stage/apiserver:neo4j3
    build: ./builds/apiserver
    image: apiserver:rapydo
    # user: ${IRODS_USER}
    user: developer
    # command: ./boot
    # working_dir: /code

    networks:
      inet:
      dbnet:

    depends_on:
      - sql
      - icat

    environment:
      APP_MODE: debug
      # project/package/prefix name
      VANILLA_PACKAGE: ${COMPOSE_PROJECT_NAME}
      # app credentials to work inside the b2access environment
      B2ACCESS_APPNAME: ${B2ACCESS_ACCOUNT}
      B2ACCESS_APPKEY: ${B2ACCESS_SECRET}
      # base the user/role mechanism on some database
      AUTH_SERVICE: alchemy
      # db access
      ALCHEMY_ENABLE: 1
      ALCHEMY_HOST: "${ALCHEMY_HOST}"
      ALCHEMY_USER: "${ALCHEMY_USER}"
      ALCHEMY_PASSWORD: "${ALCHEMY_PASSWORD}"
      # ALCHEMY_DBS: "${ALCHEMY_DBS}"
      # irods configuration
      IRODS_ENABLE: 1
      IRODS_HOST: ${IRODS_HOST}
      IRODS_PORT: ${IRODS_PORT}
      IRODS_USER: ${IRODS_USER}
      IRODS_ZONE: "${IRODS_ZONE}"
      IRODS_HOME: ${IRODS_HOME}
      IRODS_PASSWORD: ${ALCHEMY_PASSWORD}
      IRODS_AUTHSCHEME: ${IRODS_AUTHSCHEME}
      IRODS_DEFAULT_ADMIN_USER: ${IRODS_DEFAULT_ADMIN_USER}

    volumes:
      # SHARED
      - sharedcerts:/opt/certificates
# TO FIX: remove sqllite also in debug mode?
# It should be used only in the package without docker environment
      - restlitedb:/dbs
      # Uploads dir
      - tmpuploads:/uploads
      # JWT tokens secret
      - jwt_tokens:/jwt_tokens
      # B2ACCESS dev certificates
      - ./certs:/usr/local/share/ca-certificates
      # Base code
      - ./backend:/code
      # Vanilla code
      - ./vanilla:/code/eudat
      # Tests
      - ./vanilla/tests:/code/test/custom

  # #############
  # # REST API client
  # # (wget, curl, httpie, http-prompt)

  # apitests:
  #   image: eudatb2stage/apiclient
  #   command: sleep 1234567890
  #   working_dir: /tmp/client
  #   volumes:
  #     # - ./vanilla/client:/tmp/client
  #     # - ./vanilla/specs:/tmp/confs/custom
  #     # - ./backend/commons/confs:/tmp/confs/base
  #     - ./backend:/tmp/code/core
  #     - ./vanilla:/tmp/code/custom

  # #############
  # # Database administration
  # sqladmin:
  # # This docker image let you access sqllite/postgres/mysql
  # # with a phpmyadmin-like web page
  #   image: eudatb2stage/sqladminer:latest
  #   # links:
  #   #   - sql:db

  # #############
  # # Nginx proxy
  # proxy:
  #   build: ./builds/sslproxy
  #   image: nginx:rapydo
  #   # OLD: using the official image directly with no letsencrypt
  #   # image: nginx:1.11-alpine
  #   hostname: iamaproxy
  #   environment:
  #     DOMAIN: justatest.io
  #     MODE: "--staging"
  #   volumes:
  #     - sslcerts:/etc/letsencrypt
  #   # THIS FILE WAS MOVED INSIDE THE DOCKEFILE
  #   #   - ./confs/nginx.conf:/etc/nginx/nginx.conf

  # #############
  # # Client interface if using swagger
  # swagclient:
  #   image: eudatb2stage/swagger-ui:latest
  #   # environment:
  #   #   API_URL: "http://localhost/swagger-ui/"
  #   # ports:
  #   #   - 80:80

#################################
volumes:
  sharedcerts:
    driver: local
  restlitedb:
    driver: local
  graphdata:
    driver: local
  sqldata:
    driver: local
  etcconf:
    driver: local
  irodshome:
    driver: local
  irodsvar:
    driver: local
  eudatopt:
    driver: local
  tmpuploads:
    driver: local
  jwt_tokens:
    driver: local
  sslcerts:
    driver: local

networks:
  dbnet:
    driver: bridge
    ipam:
      driver: default
      config:
        # Note: use this configuration to match inside internal rules
        # TO FIX: make this an env variable
        - subnet: 172.1.0.0/16
  inet:
